<?php
/**
 * Created by PhpStorm.
 * User: mende
 * Date: 3/1/2018
 * Time: 12:20 PM
 */

/**
 * @file
 * InDeKo.Navi Wizard module file.
 * Adds content type 'hypothesis' and wizard functionality.
 * Wizard realized in combination with knowledge map module (form_wissenskarte_module).
 *
 */


/**
 * Implements hook_node_info().
 * Define a new content type 'hypothesis'.
 */
function wizard_node_info() {
  $contentType = array(
    'hypothesis' => array(
      'type'        => 'hypothesis',
      'name'        => t('Hypothese'),
      'base'        => 'node_content',
      'description' => t('Hypothese fÃ¼r Wizard'),
      'has_title'   => TRUE,
      'title_label' => t('Titel'),
      'custom'      => TRUE,
    ),
  );

  return $contentType;
}

/**
 * Implements hook_menu().
 **/
function wizard_menu() {
  // AJAX request for publication reference tooltip.
  $items['get/publication/ajax/%'] = array(
    'type'            => MENU_CALLBACK,
    'page callback'   => 'wizard_get_publication_preview_callback',
    'page arguments' => array(3),
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * Creates a preview of a node (for being displayed in a tooltip).
 * Returns HTML of the preview.
 *
 * @param $nid
 *   The node ID
 */
function wizard_get_publication_preview_callback($nid) {
  // check for valid input (positive integer)
  if(is_numeric($nid) && $nid > 0 && $nid == round($nid)) {
    $publication = node_load($nid);

    if (isset($publication)) {
      $view = node_view($publication);

      drupal_json_output($view['body']['#markup']);
    }
  }
}

/**
 * Implements hook_theme().
 * Tell Drupal to use the module's template file to display hypothesis nodes.
 */
function wizard_theme($existing, $type, $theme, $path) {
  $theme = array();
  $theme['node__hypothesis'] = array(
    'render element' => 'content',
    'base hook' => 'node',
    'template' => 'node--hypothesis',
    'path' => drupal_get_path('module', 'wizard') . '/templates',
  );

  return $theme;
}


/**
 * Implements hook_preprocess_HOOK().
 * Preprocess hypothesis theme variables.
 */
function wizard_preprocess_node(&$variables) {
  if ($variables['node']->type === 'hypothesis') {

    // get the relevant hypothesis fields
    $hypGroup = array();
    foreach ($variables['content'] as $key => $field) {
      $keyArray = explode('_', $key);
      if ($keyArray[0] === 'field' && $keyArray[1] === 'hyp') {
        $hypGroup[$keyArray[2]][$keyArray[3]] = $field;

        // content will be printed separately in node--hypothesis.tpl.php
        // do not render the separate fields, they are build and rendered as fieldsets later
        hide($variables['content'][$key]);
      }
    }

    // build fieldset for each group (title, description, links)
    foreach ($hypGroup as $group) {
      $nodeIds = array();
      $nodeTooltips = array();
      foreach ($group['links']['#items'] as $link) {
        $nodeIds[] = $link['target_id'];
        $nodeTooltips[] = array('title' => $link['entity']->title,
                                'type' => $link['entity']->type);
      }

      // build Solr query to return the given nodes
      $searchData = 'entity_id:(' . implode(' OR ', $nodeIds) . ')';

      $fieldset = array(
        'element' => array(
          '#type' => 'fieldset',
          // safe_value instead of value. value does not include filtered html (e.g. processed by bilbio reference filter)
          '#title' => $group['title']['#items'][0]['safe_value'],
          '#value' => $group['description']['#items'][0]['safe_value'],
          '#children' => '<div>',
          '#attributes' => array(
            'class' => array('hypothesis'),
            'data-search' => array($searchData),
          ),
        )
      );

      // add fieldset tooltip (link titles with content type icon)
      if (!empty($nodeTooltips)) {
        $fieldset['element']['#attributes']['class'][] = 'has-tooltip';

        $fieldset['element']['#value'] .= '<div class="tooltip">';
        foreach ($nodeTooltips as $tooltip) {
          $fieldset['element']['#value'] .= '<div class="icon ' . $tooltip['type'] . '">' . check_plain($tooltip['title']) .'</div>';
        }
        $fieldset['element']['#value'] .=  '</div>';
      }

      // content will be printed separately in node--hypothesis.tpl.php
      $variables['content']['fieldsets'][] = $fieldset;
      hide($variables['content']['fieldsets']);
      hide($variables['content']['field_similar']);
      hide($variables['content']['field_references']);
    }

    // attach JavaScript file
    $variables['content']['#attached']['js'][] = array(
      'data' => drupal_get_path('module', 'wizard') . '/js/wizard.js',
      'type' => 'file',
      'scope' => 'footer',
      'group' => JS_THEME,
    );

    // attach CSS file
    $variables['content']['#attached']['css'][] = array(
      'data' => drupal_get_path('module', 'wizard') . '/css/wizard.css',
      'type' => 'file',
      'scope' => 'footer',
      'group' => CSS_THEME,
    );
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function wizard_form_hypothesis_node_form_alter(&$form, &$form_state, $form_id) {
  $form['#after_build'][] = '_wizard_add_css_after_build';
}

/**
 * Adds CSS to the hypothesis add/edit pages.
 */
function _wizard_add_css_after_build($form, &$form_state) {
  $form['#attached']['css'][] = array(
    'data' => drupal_get_path('module', 'wizard') . '/css/wizard_form.css',
    'type' => 'file',
    'scope' => 'footer',
    'group' => CSS_THEME,
  );
  return $form;
}

/**
 * Implements hook_views_api().
 * Needed for the module's view in 'wizard.views_default.inc' to get created during install.
 */
function wizard_views_api($module = NULL, $api = NULL) {
  return array("api" => "3.0");
}


/**
 * Returns the node ID of the publication matching the given citekey.
 *
 * @param string $citekey
 *   The citation key of the publication.
 *
 * @return int
 *   -1 for invalid citekey, else the node ID.
 */
function wizard_citekey_get_nid($citekey) {

  $query = 'SELECT nid FROM {biblio} WHERE biblio_citekey = :key';
  $nid = db_query($query, array(':key' => $citekey))->fetchField();

  if ($nid) {
    return $nid;
  }
  return -1;
}


/**
 * Adds tooltip (publication preview) to a bibliographic reference.
 *
 * @param string $reference
 *   HTML string of a bibliographic reference.
 * @param string $citekey
 *   The citekey of the referenced publication.
 *
 * @return string
 *   HTML string with added tooltip.
 */
function wizard_add_reference_tooltip($html, $citekey) {
  $htmlWithTooltip = '';

  // add preview tooltip only to the title link
  $pattern = '|<span class=\"biblio\-title\"\s>(.*?)</span>|s';
  $nid = wizard_citekey_get_nid($citekey);
  $replace = '<span class="referencelink" id=' . $nid . '>$0</span>';

  $htmlWithTooltip = preg_replace($pattern, $replace, $html);

  return $htmlWithTooltip;
}


/**
 * Builds an ordered list of references.
 *
 * @param array $references
 *   Array of citekeys.
 *
 * @return array
 *   Renderable array of an ordered list of references.
 */
function wizard_get_references_form($references) {
  $form = array();

  if (!empty($references)) {

    $listItems = array();
    foreach($references as $key => $ref) {
      $refNr = $key +1;
      $citeKeyHtml = _biblio_citekey_print($ref);
      $citeKeyHtml = wizard_add_reference_tooltip($citeKeyHtml, $ref);

      $listItems[] = '<span id="reference' . $refNr . '"><a name="ref' . $refNr . '">' . $citeKeyHtml . ' </a></span>';
    }

    $form = array (
      '#title' => t('References'),
      '#theme' => 'item_list',
      '#items' => $listItems,
      '#type' => 'ol',
      '#attributes' => array('class' => 'references'),
      '#weight' => 50,
    );
  }

  return $form;
}


/**
 * Implements hook_node_view().
 * Adds bibliographic references to a node. All text fields of the defined content types are scanned
 * for citation keys [bib]<citation key>[/bib]. Found keys are replaced and point to the bibliographic
 * references at the end of the node.
 * Related to biblio.module that only creates references for every single text field separately.
 */
function wizard_node_view($node, $view_mode, $langcode) {
  // define all content types that should be scanned for references
  $contentTypes = array('hypothesis');

  if (in_array($node->type, $contentTypes)) {

    // define all field types that should be scanned for references
    $fieldTypeText = array('text', 'text_long', 'text_with_summary');

    // define supported format [bib]<citekey>[/bib]
    $pattern = '|\[bib](.*?)\[/bib]|s';
    $refClass = 'refLink';

    // stores citekeys of all the node's text fields in the order they appeared
    $references = array();

    foreach (element_children($node->content, TRUE) as $fieldName) {
      $field = $node->content[$fieldName];
      if (in_array($field['#field_type'], $fieldTypeText, TRUE)) {

        // look for citekeys in the field's text
        $text = $field['#items'][0]['safe_value'];
        $matches = array();
        preg_match_all($pattern, $text, $matches);

        // replace found citekeys
        if (!empty($matches[0])) {
          $references = array_merge($references ,$matches[1]);
          $references = array_values(array_unique($references));

          foreach ($matches[1] as $key => $citekey) {
            $refNr = array_search($citekey, $references) + 1;

            // the numbered element that will replace the found [bib]...[/bib]
            $refLink = '<a class="'.$refClass.'" href="#ref' . $refNr . '" title="Reference ' . $refNr . '">[' . $refNr . ']</a>';
            $text = str_replace($matches[0][$key], $refLink, $text);
          }
        }

        $node->content[$fieldName]['#items'][0]['safe_value'] = $text;

        // 'text_long' and 'text' field type do use save_value for display?!
        if ($field['#field_type'] === 'text_long' || $field['#field_type'] === 'text') {
          $node->content[$fieldName][0]['#markup'] = $text;
        }
      }
    }

    $node->content['field_references'] = wizard_get_references_form($references);
  }
}